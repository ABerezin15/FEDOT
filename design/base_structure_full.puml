@startuml
interface Composer {

    Chain compose_chain(initial_chain, requirements, meta_params)

}

interface Operation {
    DataStream apply()
}

interface Tuning {
    void tune_domain_model(observations: DataStream)
}

interface DataProcessing {
    DataStream process(input_data: DataStream)
}


interface Learning {
    void fit_template_model(dataset: DataStream)
}

interface Building {

}

class PCA {
    DataStream reduce_dimension(input_data: DataStream)
}

interface Ensembling {

}

class Chain {
    DataStream result()
    void add_operation(new_operation: Operation)
    void update_operation(new_operation: Operation)
    AtomicModel as_atomic_model()
}

class ComposerRequirements {
    elementary_functions: ElementaryFunctionsRepository
    model_templates: ModelTemplatesRepository
    domain_models: DomainModelsRepository
    atomic_models: AtomicModelsRepository
}

class ModelTemplatesRepository

class TemplateModel {
    name: String
    package_name: String
    package_version: String
}

class SklearnLasso {
    l1_ratio: float
    eps: float
}


class DomainModelsRepository

class DomainModel {
        initial_conditions : DomainModelParams
        boundary_conditions: DomainModelParams
        void update_model_params(new_model_params)
        SimulationResults compute()
}

class Nemo {
    void download_inputs()
    SimulationResults compute_on_cluster()
}

class NemoRebecTuning {
    meta_params: dict
    void create_perturbed_ensemble()
    void optimize_by_spea2()
}

abstract class ComposerMetaParams
class EpdeComposer
class EpdeMetaParams {
    sparsity_rate: Float
}

Composer ..> ComposerRequirements
Composer ..> ComposerMetaParams
Composer ..> Chain


ComposerRequirements *-- ModelTemplatesRepository
ComposerRequirements *-- DomainModelsRepository
ModelTemplatesRepository *-- TemplateModel

DomainModelsRepository *-- DomainModel

EpdeComposer ..|> Composer
EpdeMetaParams ..|> ComposerMetaParams
EpdeComposer ..> EpdeMetaParams

Operation <|-- DataProcessing
PCA <|-- DataProcessing
Operation <|-- Tuning
Operation <|-- Learning
Operation <|-- Building
Building <|-- Ensembling

Chain ..|> Operation

SklearnLasso *-- TemplateModel
SklearnLasso ..|> Learning

Nemo ..|> DomainModel
Tuning <|-- NemoRebecTuning
NemoRebecTuning *-- Nemo

@enduml